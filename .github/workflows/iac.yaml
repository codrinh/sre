name: 'Terraform CI'

on:
  push:
    branches:
    - main
  pull_request:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  ENV: dev
  # GAR_LOCATION: europe-west3-c # TODO: update region of the Artifact Registry
  # GKE_CLUSTER: cluster-1    # TODO: update to cluster name
  # GKE_ZONE: europe-west3-c   # TODO: update to cluster zone
  # DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  # REPOSITORY: samples # TODO: update to Artifact Registry docker repository
  # IMAGE: static-site

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: 'projects/615713427419/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        service_account: 'dev-github-runner-sa@dev-demo-codrin-h.iam.gserviceaccount.com'

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./iac/terraform
      run: terraform init -backend-config=environments/$ENV/config.gcs.tfbackend
      # env:
      #   GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./iac/terraform
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./iac/terraform
      run: terraform plan --var-file environments/$ENV/$ENV.tfvars
      # env:
      #   GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ./iac/terraform
      run: terraform apply -auto-approve --var-file environments/$ENV/$ENV.tfvars 
